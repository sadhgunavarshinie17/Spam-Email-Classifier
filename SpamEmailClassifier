pip install pandas numpy scikit-learn nltk

import pandas as pd

df = pd.read_csv(r"C:\Users\Lenovo\Documents\spam.csv", encoding="latin-1") #preventing non-English Characters

df = df[['v1', 'v2']]
df.columns = ['label', 'message'] #renaming
print(df.head(10))

import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

nltk.download('stopwords')

df['label'] = LabelEncoder().fit_transform(df['label'])

def preprocess_text(text):
    text = text.lower()
    text = re.sub('\W', ' ', text) #removing special characters
    text = re.sub('\s', ' ', text) #removing extra spaces
    words = text.split()
    words = [word for word in words if word not in stopwords.words('english')]
    return " ".join(words)


df['message'] = df['message'].apply(preprocess_text)

# Convert text into TF-IDF features
vectorizer = TfidfVectorizer(max_features=3000)
X = vectorizer.fit_transform(df['message']).toarray()
y = df['label']

# Data splicing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

#Training the model
model = MultinomialNB()
model.fit(X_train, y_train)

#Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Accuracy of model: ", round(accuracy_score(y_test, y_pred), 2)*100)
print("Classification Report: \n", classification_report(y_test, y_pred))

def predict_spam(text):
    processed_text = preprocess_text(text)
    text_vectorized = vectorizer.transform([processed_text]).toarray()
    prediction = model.predict(text_vectorized)
    return "Spam" if prediction[0] == 1 else "Not Spam"

#Tests
print(predict_spam("Nah, it isnt working yet, maybe I should get a FREE iPhone! NOW! By clicking on this link to claim my prize!"))
print(predict_spam("Win a FREE iPhone now! Click this link to claim your prize"))
